import Math, &StandardImport
{createGestureRecognizer} = Events.GestureRecognizer

class PushbackEvent

  constructor: (@defaultAction)->
    @currentValidActionNumber = 0

  replace: (promise, action = @defaultAction) ->
    actionNumber = @currentValidActionNumber += 1
    log "replace"
    promise.then ->
      log "replace triggered"
      if @currentValidActionNumber == actionNumber
        log "replace triggered - action!"
        action()

  cancel: -> @currentValidActionNumber++

class ScoreEditWidget extends FluxComponent

  constructor: ->
    super
    @startAmount = 0
    @applyEvent = null

  @stateFields
    xOffset:  0
    amount:   null
    tracking: false

  cancel: (e) ->
    @amount = null
    @xOffset = 0
    @tracking = false
    @applyEvent?.cancel()
    @applyEvent = null

  begin: (e) ->
    log begin: @startAmount = @amount ||= 0
    @applyEvent = new PushbackEvent ->
      log Apply: @amount
      @cancel()

    @tracking = true

  move:  (e) ->
    absDeltaX = abs deltaX = @xOffset = e.totalParentDelta.x
    sign = deltaX / absDeltaX
    log {absDeltaX}
    absDeltaX += 15 if absDeltaX > 0

    addAmount =
      sign
      * Math.pow absDeltaX / 20, 1.5
      | 0
    log "move: #{@startAmount} + #{addAmount}"
    @applyEvent.replace timeout 3
    @amount = @startAmount + addAmount

  end:   (e) ->
    @xOffset = 0
    @tracking = false

  getInitialState: ->
    handlers:
      createGestureRecognizer
        horizontal: {@begin, @move, @end, @cancel}

  render: ->
    {lineHeight, gridSize} = LayoutProps
    {amount} = @
    log {amount}

    Element
      Element
        on: @state.handlers
        animators: !@tracking && location: true
        location: x: @xOffset / 4

        Element
          childrenLayout: :row
          Element
            draw: #eee
            size: lineHeight

          TextElement
            TextStyles.xLargeText
            size:   hh: 1
            align:  .5
            text:   "#{@props.score}"
            color:  TextPalette.black.primary

          Element
            draw: #eee
            size: lineHeight

        # @props.children

      if amount?
        Element
          location: xw: .5
          axis: x: .5
          size: cs: 1
          padding: v: 5, h: 10
          childrenLayout: :row
          childrenMargins: gridSize

      #     padding: h: gridSize / 2
      #     size: w: gridSize * 10, hh: 1
      #     if amount > 0
      #       location: xw: 1 x: gridSize
      #     else
      #       location: x: -gridSize
      #       axis: "topRight"
          draw:
            rectangle: radius: 100
            #777

          TextElement
            size: cs: 1
            TextStyles.smallText
            align: y: .5
            text: "#{if amount > 0 then :+}#{amount}"
            color: TextPalette.white.primary

          TextElement
            size: cs: 1
            TextStyles.smallText
            align: y: .5
            text: "X"
            on: pointerClick: @cancel
            color: TextPalette.white.secondary


class PlayerScore extends FluxComponent
  render: ->
    {gridSize, lineHeight} = LayoutProps
    {name, score, color} = @props
    Element
      size: ww:1, h: lineHeight

      childrenLayout:   :row
      childrenMargins:  gridSize
      childrenAlignment: "bottom"

      Element
        childrenLayout:   :row
        childrenMargins:  gridSize
        childrenAlignment: "centerLeft"

        Element
          draw:
            rectangle: radius: 5
            fill: color
            outline: TextPalette.black.secondary
          size: hh:1 wh:1

        TextElement
          TextStyles.largeText
          size:   cs: 1
          text:   name
          color:  TextPalette.black.primary

      ScoreEditWidget {score}

      # ButtonWrapper
      #   size: wcw:1, hh:1
      #   action: => @props.add name, 1
      #   TextElement
      #     TextStyles.mediumText
      #     size:     cs: 1
      #     padding:  h: gridSize
      #     text:     "+"
      #     color:    TextPalette.white.primary

      # ButtonWrapper
      #   size: wcw:1, hh:1
      #   action: => @props.add name, -1
      #   TextElement
      #     size: cs: 1
      #     padding: h: gridSize
      #     TextStyles.mediumText
      #     text: "-"
      #     color: TextPalette.white.primary

class Home extends FluxComponent

  @stateFields
    players:
      name: :Alice    score: 100  color: #ff4
      name: :Bill     score: 200  color: #f44

  add: (name, amount) ->
    @players = object player from @players
      if player.name == name
        merge player, score: player.score + amount
      else
        player

  render: ->
    {gridSize} = LayoutProps
    Element
      padding:          gridSize
      childrenLayout:   :column
      childrenMargins:  gridSize
      array player from @players
        PlayerScore player, {} @add
