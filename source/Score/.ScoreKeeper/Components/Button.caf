import &StandardImport

class Button extends PointerActionsMixin FluxComponent

  action: ({target}, b)->
    unless @props.hidden || @props.disabled
      @props.action? null, @props
      el = target
      while el && el.key != :appRoot
        el = el.parent
      @models.navState.buttonAnimationArea = target.getElementToElementMatrix(el).transformBoundingRect target.paddedArea

  render: ->
    {icon, disabled, beforeText, color = #444, text, delay, hidden, width = 1, height = 1} = @props
    {padding, gridSize} = Style
    c = unless color is Array
      rgbColor color
    txtColor = if c?.perceptualLightness < .4
      #fff9
    else
      #000

    Element
      on: @buttonHandlers
      cursor: !disabled && :pointer
      padding: padding
      animators: :size :opacity
      clip: true
      opacity: if disabled then .5 else 1

      size:
        h: height * gridSize
        w: width * gridSize

      Element
        axis: .5
        location: :centerCenter
        animateOnCreation: true
        scale: if hidden then 0 else 1
        animators:
          scale:
            toFrom: 0
            delay: delay
          draw: {}
            duration: .5
            delay

        draw:
          :padded
          fill:
            color: color
            to: :bottomRight

        @hover && Element
          animators: opacity: toFrom: 0
          draw: #fff7

        Element
          key:  :content
          size:     :parentHeightChildrenWidth
          location: :centerCenter
          childrenLayout: :row
          axis:     .5
          scale: (ps, cs) -> min 1, ps.minRatio cs
          if beforeText
            Element
              margin:   gridSize /2
              key:      :beforeText
              size:     :parentHeightChildrenWidth
              animators:
                size: toFrom: w:0
                margin: toFrom: 0
              clip: true

              TextElement
                size:     :parentHeightChildrenWidth
                align:    .5
                color:    txtColor
                Style.heavyText
                upperCase beforeText

          if icon
            TextElement
              key:      :icon
              size:     :parentHeightChildrenWidth
              color:    txtColor
              animators:
                color: true
                opacity: toFrom: 0

              align:    .5
              Icons[icon]
          else if present text
            TextElement
              key:      :mainText
              size:     :parentHeightChildrenWidth
              color:    txtColor
              animators:
                color: true
                opacity: toFrom: 0

              align:    .5
              Style.heavyText
              upperCase text
