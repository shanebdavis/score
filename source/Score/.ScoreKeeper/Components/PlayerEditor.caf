import &StandardImport

class PlayerEditor extends FluxComponent
  @subscriptions :currentGame.players :navState.navState

  @propFields
    playerId: null

  @getter
    player: -> @players[@playerId]
    name:   -> @player?.name
    color:  -> @player?.color

  deletePlayer: -> @models.navState.confirmDeletePlayerId = @playerId

  @setter
    color: (color) -> @models.currentGame.updatePlayer @playerId, {} color
    name:  (name)  -> @models.currentGame.updatePlayer @playerId, {} name

  done: ->
    @models.navState.clearEditPlayerId()

  render: ->
    {color} = @
    confirmDelete = @navState.confirmDeletePlayerId
    legalName = present @name

    Element
      childrenLayout: :column

      &ColorPicker action: @setColor, hidden: confirmDelete
      Element
        size: h: gridSize
      Element
        size: h: gridSize
        childrenLayout: :row
        &Button {} color, width: 2,                            hidden: confirmDelete, icon: :-, action: @deletePlayer
        &Button {}
          color
          width: 6
          delay: animationDelay * 2
          beforeText:
            confirmDelete && "delete"
          text: @name + if confirmDelete then "?" else "|"
        &Button {} color, width: 2, delay: animationDelay * 6, disabled: !legalName, hidden: confirmDelete, icon: :check, action: @done

      &Keyboard {}
        color
        hidden: confirmDelete
        value: @name
        valueChanged: @setName

      if confirmDelete
        Element
          inFlow: false
          size:
            wcw:1
            h: gridSize
          location:
            x: gridSize * 2
            y: gridSize * 3
          childrenLayout: :row
          &Button {} color, width: 3, delay: animationDelay*5, icon: :*     action: @models.navState.clearConfirmDeletePlayerId
          &Button {} color, width: 3, delay: animationDelay*7, icon: :check action: @models.currentGame.confirmDeletePlayer
