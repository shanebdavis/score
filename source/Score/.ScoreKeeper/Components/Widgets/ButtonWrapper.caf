import &StandardImport

class ButtonWrapper extends PointerActionsMixin FluxComponent

  action: ({target}, b)->
    unless @props.hidden || @props.disabled
      @props.action? null, @props
      el = target
      while el && el.key != :appRoot
        el = el.parent

  scaleFit = (ps, cs) -> min 1, ps.minRatio cs

  render: ->
    {icon, angle, size, disabled, x, y, beforeText, color = Style.defaultButtonColor, text, delay, hidden, width = 1, height = 1} = @props
    {padding, gridSize} = Style
    c = unless color is Array
      rgbColor color

    txtColor = getContrastingTextColor c

    disabled ?= true unless @props.action

    Element
      on: @buttonHandlers
      cursor: !disabled && :pointer
      padding: padding
      animators: :size :opacity
      clip: true
      opacity: if disabled then .5 else 1

      location: if x? || y?
        x: (x ? 0) * gridSize
        y: (y ? 0) * gridSize

      size: size ?
        h: height * gridSize
        w: width  * gridSize

      Element
        axis: .5
        location: :centerCenter
        animateOnCreation: true
        scale: if hidden then 0 else 1
        animators:
          scale:
            toFrom: 0
            delay: delay
          draw: {}
            duration: .5
            delay

        draw:
          # :padded
          fill:
            color: color
            to: :bottomRight

        @hover && Element
          animators: opacity: toFrom: 0
          draw: #fff7

        @props.children