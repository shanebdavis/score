import &StandardImport

class CurrentGame extends ApplicationState
  @persistant()

  @stateFields
    players: {}
    history: []

  @getter
    unusedColor: ->
      find c in Style.colors when
        c = rgbColor c
        !find {color} in @players when rgbColor(color).eq c

  normalizeProps = (props) ->
    {color} = props
    if color && !isString color
      merge props, color: color.toString()
    else
      props

  updatePlayer: (playerId, props) ->
    @players = merge @players, [playerId]: merge @players[playerId], normalizeProps props

  deletePlayer: (playerId) ->
    @players = objectWithout @players, "#{playerId}"

  newPlayer: (initialProps)->
    @updatePlayer
      id = cryptoRandomString()
      normalizeProps merge
        id:     id
        color:  #fdff33
        score:  0
        name:   ""
        initialProps

    @pushHistory id, {}
    id

  pushHistory: (playerId, props) ->
    @history = arrayWith @history, merge {playerId, createdAt: toSeconds(), add: 0}, normalizeProps props

  addHistory: (historyEntry, amount) ->
    amount ?= 1
    if entry = @history[historyEntry]
      entry extract playerId
      h = @history.slice()
      h[historyEntry] = merge entry,
        add: entry.add + amount
        updatedAt: toSeconds()
      @history = h
      @updatePlayer playerId, score: @players[playerId].score + amount

  add: (playerId, amount) ->
    amount ?= 1
    @pushHistory playerId, add: amount
    @updatePlayer playerId, score: @players[playerId].score + amount